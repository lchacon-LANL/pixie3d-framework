c Load Hammersley sequence for quiet start
c#######################################################################      
      subroutine HamSeq(nmax,r,dim_num,n,rank,nproc)
      
! see http://people.sc.fsu.edu/~jburkardt/cpp_src/hammersley/hammersley.html      
!! I4_TO_HAMMERSLEY_SEQUENCE: N elements of a leaped Hammersley subsequence.
!
!  Discussion:
!
!    The DIM_NUM-dimensional Hammersley sequence is really DIM_NUM separate
!    sequences, each generated by a particular base.  If the base is
!    greater than 1, a standard 1-dimensional
!    van der Corput sequence is generated.  But if the base is
!    negative, this is a signal that the much simpler sequence J/(-BASE)
!    is to be generated.  For the standard Hammersley sequence, the
!    first spatial coordinate uses a base of (-N), and subsequent
!    coordinates use bases of successive primes (2, 3, 5, 7, 11, ...).
!    This program allows the user to specify any combination of bases,
!    included nonprimes and repeated values.
!
!    This routine selects elements of a "leaped" subsequence of the
!    Hammersley sequence.  The subsequence elements are indexed by a
!    quantity called STEP, which starts at 0.  The STEP-th subsequence
!    element is simply element
!
!      SEED(1:DIM_NUM) + STEP * LEAP(1:DIM_NUM)
!
!    of the original Hammersley sequence.

      implicit none
      
c     Call variables
      integer(4), intent(in),optional :: rank,nproc
      integer(4), intent(in) :: nmax,dim_num,n
      real(8),    intent(out) :: r(dim_num,nmax)
      
c     Local variables      
      integer ( kind = 4 ) base(dim_num)
      integer ( kind = 4 ) i
      integer ( kind = 4 ) leap(dim_num)
      integer ( kind = 4 ) prime
      integer ( kind = 4 ) seed(dim_num)
      integer ( kind = 4 ) step
c      integer ( kind = 4 ), save :: ncall = 0
      integer ( kind = 4 ) lrank,lnproc

      if(present(nproc)) then
         lrank = rank
         lnproc= nproc
      else
         lrank = 0
         lnproc= 1
      end if

      step = n !start with 0
      do i = 1, dim_num
         seed(i) = 1 !lrank+1
      end do
      leap(1:dim_num) = 1 !lnproc

      do i = 1, dim_num
         base(i) = prime (i)
      end do

c$$$      if(lncall==0) then
c$$$         base(1) = -nmax
c$$$         do i = 2, dim_num
c$$$            base(i) = prime ( i - 1 )
c$$$         end do
c$$$      else
c$$$         do i = 1, dim_num
c$$$            base(i) = prime ( (dim_num-1) + (lncall-1)*dim_num + i )
c$$$         end do
c$$$      end if


c      call i4_to_hammersley_sequence(dim_num,n,step,seed,leap,base,r)
      call i4_to_hammersley_sequence(dim_num,nmax,step,seed,leap,base,r)

c$$$      if(lrank==0)then
c$$$c$$$
c$$$c$$$         write ( *, '(a)' ) ' '
c$$$c$$$         write ( *, '(a)' ) '    STEP   Hammersley'
c$$$c$$$         write ( *, '(a)' ) ' '
c$$$         do j = 1, nmax
c$$$            write ( *, * ) j,step+j-1, r(1:dim_num,j)
c$$$         end do
c$$$      end if
c$$$      stop


cc      print *, "in Hammersley"

      end subroutine HamSeq

c normal inverse
c     ##################################################################
      real*8 function dinvnorm(p)
      real*8 p,p_low,p_high
      real*8 a1,a2,a3,a4,a5,a6
      real*8 b1,b2,b3,b4,b5
      real*8 c1,c2,c3,c4,c5,c6
      real*8 d1,d2,d3,d4
      real*8 z,q,r
      a1=-39.6968302866538
      a2=220.946098424521
      a3=-275.928510446969
      a4=138.357751867269
      a5=-30.6647980661472
      a6=2.50662827745924
      b1=-54.4760987982241
      b2=161.585836858041
      b3=-155.698979859887
      b4=66.8013118877197
      b5=-13.2806815528857
      c1=-0.00778489400243029
      c2=-0.322396458041136
      c3=-2.40075827716184
      c4=-2.54973253934373
      c5=4.37466414146497
      c6=2.93816398269878
      d1=0.00778469570904146
      d2=0.32246712907004
      d3=2.445134137143
      d4=3.75440866190742
      p_low=0.02425
      p_high=1-p_low
      if(p.lt.p_low) goto 201
      if(p.ge.p_low) goto 301
 201     q=dsqrt(-2*dlog(p))
      z=(((((c1*q+c2)*q+c3)*q+c4)*q+c5)*q+c6)/
     &((((d1*q+d2)*q+d3)*q+d4)*q+1)
      goto 204
 301     if((p.ge.p_low).and.(p.le.p_high)) goto 202
      if(p.gt.p_high) goto 302
 202     q=p-0.5
      r=q*q
      z=(((((a1*r+a2)*r+a3)*r+a4)*r+a5)*r+a6)*q/
     &(((((b1*r+b2)*r+b3)*r+b4)*r+b5)*r+1)
      goto 204
 302     if((p.gt.p_high).and.(p.lt.1)) goto 203
 203        q=dsqrt(-2*dlog(1-p))
      z=-(((((c1*q+c2)*q+c3)*q+c4)*q+c5)*q+c6)/
     &((((d1*q+d2)*q+d3)*q+d4)*q+1)
 204     dinvnorm=z
      return
      end function dinvnorm
