#include "LevelContainer.h"
#include "fortran.h"
extern "C" {
#include "assert.h"
#include <assert.h>

/* This will have to be reincorporated later : BP */
#if 0
#ifdef absoft
extern void FORTRAN_NAME(TIMESTEP) (void*,int*,int*,int*,int*,int*,int*,double*);
#else
extern void FORTRAN_NAME(timestep) (void*,int*,int*,int*,int*,int*,int*,double*);
#endif
#endif

}


/***********************************************************************
*                                                                      *
*  Get the next timestep from pixie3d                                  *
*                                                                      *
***********************************************************************/
double calc_dt( tbox::Pointer< solv::SAMRAIVectorReal<NDIM,double> > x,
                tbox::Pointer< solv::SAMRAIVectorReal<NDIM,double> > f)
{
   double dt;
   double *array_ptr[NVAR];
   int xs, xe, ys, ye, zs, ze;
   tbox::Pointer<hier::PatchHierarchy<NDIM> > hierarchy = x->getPatchHierarchy();
   dt = 0.01;

   // Get the timestep
   // Loop through hierarchy
   for ( int ln=0; ln<hierarchy->getNumberLevels(); ln++ ) {
      tbox::Pointer<hier::PatchLevel<NDIM> > level = hierarchy->getPatchLevel(ln);
      // Loop through the different patches
      for (hier::PatchLevel<NDIM>::Iterator p(level); p; p++) {
         tbox::Pointer< hier::Patch<NDIM> > patch = level->getPatch(p());
         // Get pointers to the data
         for (int i=0; i<NVAR; i++) {
            tbox::Pointer< pdat::CellData<NDIM,double> >tmp = x->getComponentPatchData(i,*patch);
            const hier::IntVector<NDIM> ghost = tmp->getGhostCellWidth();
            array_ptr[i] = tmp->getPointer();
         }
         /* This will have to be reincorporated later : BP */
/*
         // Create LevelContainer
         tbox::Pointer< pdat::CellData<NDIM,double> >tmp = x->getComponentPatchData(0,*patch);
         const hier::Index<NDIM> ifirst = tmp->getGhostBox().lower();
         const hier::Index<NDIM> ilast  = tmp->getGhostBox().upper();
         xs = ifirst(0)+1;
         ys = ifirst(1)+1;
         zs = ifirst(2)+1;
         xe = ilast(0)+1;
         ye = ilast(1)+1;
         ze = ilast(2)+1;
         LevelContainer *level_container = new LevelContainer(NVAR,array_ptr,xs,ys,zs,xe,ye,ze);
         tbox::pout << "Call forminitialcondition\n";
         // Form Initial Conditions
         #ifdef absoft
            FORTRAN_NAME(TIMESTEP)(level_container->getPtr(),&xs,&xe,&ys,&ye,&zs,&ze,&dt);
         #else
            FORTRAN_NAME(timestep)(level_container->getPtr(),&xs,&xe,&ys,&ye,&zs,&ze,&dt);
         #endif
         tbox::pout << "Finished forminitialcondition\n";
         // Destroy LevelContainer
         delete level_container;
      }
   } 
*/
   return dt;
}




